from aiogram import types
from aiogram.utils.emoji import emojize

from data.config import ADMIN
from loader import _
from models.db_service import DBService
from utils.functions import get_status_emoji, get_intentions_count_sum_to, get_intentions_count_sum_from, \
    get_all_obligations_count_sum_to, get_all_obligations_count_sum_from, get_all_obligations_completed_from, \
    get_all_obligations_completed_to

dbs = DBService()


async def markup_general_menu(lang=None):
    user_from_tg = types.User.get_current()
    user_from_db = await dbs.users.get_user(user_from_tg.id)

    status = await get_status_emoji(user_from_db.status)
    markup_general_menu = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    if lang:
        btn1 = emojize(_(":spiral_calendar_pad:\n–û—Ä–≥–∞–Ω–∞–π–∑–µ—Ä", locale=lang))
        btn2 = emojize(":bust_in_silhouette:") + status + "\n" + _("–ü—Ä–æ—Ñ–∏–ª—å", locale=lang)
        btn3 = emojize(_(":busts_in_silhouette:\n–£—á–∞—Å—Ç–Ω–∏–∫–∏", locale=lang))
        btn4 = emojize(":question: FAQ")

        markup_general_menu.add(btn1, btn2)
        markup_general_menu.add(btn3, btn4)

        if user_from_tg.id == ADMIN:
            btn5 = _("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",  locale=lang)
            markup_general_menu.add(btn5)

    else:
        btn1 = emojize(_(":spiral_calendar_pad:\n–û—Ä–≥–∞–Ω–∞–π–∑–µ—Ä"))
        btn2 = emojize(":bust_in_silhouette:") + status + "\n" + _("–ü—Ä–æ—Ñ–∏–ª—å")
        btn3 = emojize(_(":busts_in_silhouette:\n–£—á–∞—Å—Ç–Ω–∏–∫–∏"))
        btn4 = emojize(":question: FAQ")

        markup_general_menu.add(btn1, btn2)
        markup_general_menu.add(btn3, btn4)

        if user_from_tg.id == ADMIN:
            btn5 = _("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            markup_general_menu.add(btn5)

    return markup_general_menu


async def markup_organaiser_menu():
    user_id = types.User.get_current()

    markup_organaiser_menu = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    intentions_from_count, intentions_from_sum = await get_intentions_count_sum_from(from_id=user_id)
    obligations_from_count, obligations_from_sum = await get_all_obligations_count_sum_from(from_id=user_id, statuses=[11])
    proof_obligation_from_count, proof_obligation_from_sum = await get_all_obligations_count_sum_from(from_id=user_id,
                                                                                                  statuses=[12])
    completed_obligation_from_count, completed_obligation_from_sum = await get_all_obligations_completed_from(
        from_id=user_id)
    archive_obligation_from_count, archive_obligation_from_sum = await get_all_obligations_count_sum_from(from_id=user_id,
                                                                                                      statuses=[110,
                                                                                                                120])

    intentions_to_count, intentions_to_sum = await get_intentions_count_sum_to(to_id=user_id)
    obligations_to_count, obligations_to_sum = await get_all_obligations_count_sum_to(to_id=user_id, statuses=[11])
    proof_obligation_to_count, proof_obligation_to_sum = await get_all_obligations_count_sum_to(to_id=user_id,
                                                                                            statuses=[12])
    completed_obligation_to_count, completed_obligation_to_sum = await get_all_obligations_completed_to(to_id=user_id)
    archive_obligation_to_count, archive_obligation_to_sum = await get_all_obligations_count_sum_to(to_id=user_id,
                                                                                                statuses=[110, 120])

    count_bad_obligation = archive_obligation_from_count + archive_obligation_to_count

    btn1 = emojize(
        f":bust_in_silhouette:‚Üí:busts_in_silhouette:\n"
        f"{intentions_from_count}/{intentions_from_sum}:heart:|{obligations_from_count}/{obligations_from_sum}:handshake:")
    btn2 = emojize(
        f":busts_in_silhouette:‚Üí:bust_in_silhouette:\n"
        f"{intentions_to_count}/{intentions_to_sum}:heart:|{obligations_to_count}/{obligations_to_sum}:handshake:")
    btn3 = emojize(f":handshake:‚Üíüëç\n{proof_obligation_to_count}‚Üí:bust_in_silhouette:‚Üí{proof_obligation_from_count}")
    btn4 = emojize(_("–ê—Ä—Ö–∏–≤ üëç\n") +
        f"{completed_obligation_to_count}/{completed_obligation_to_sum}‚Üí:bust_in_silhouette:‚Üí"
        f"{completed_obligation_from_count}/{completed_obligation_from_sum}")
    btn5 = emojize(_("–ê—Ä—Ö–∏–≤ :hourglass:\n{}")).format(count_bad_obligation)
    btn6 = _("–ú–µ–Ω—é")

    markup_organaiser_menu.add(btn1, btn5)
    markup_organaiser_menu.add(btn2, btn4)
    markup_organaiser_menu.add(btn3, btn6)

    return markup_organaiser_menu


async def markup_peoples_menu(telegram_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    count_my_socium = len(await dbs.rings_help.get_my_socium(telegram_id))

    list_intentions_to = await dbs.intentions.get_intentions(statuses=[1, 11, 12, 13], to_id=telegram_id)
    set_intentions_ids_to = set([intention.from_id for intention in list_intentions_to])
    intentions_to_count = len(set_intentions_ids_to)

    list_intentions_from = await dbs.intentions.get_intentions(statuses=[1, 11, 12, 13], from_id=telegram_id)
    set_intentions_ids_from = set([intention.to_id for intention in list_intentions_from])
    intentions_from_count = len(set_intentions_ids_from)

    btn1 = emojize(_("–ú–æ—è —Å–µ—Ç—å :busts_in_silhouette:{}")).format(count_my_socium)
    btn2 = emojize(f"{intentions_to_count}:busts_in_silhouette: ‚Üí :bust_in_silhouette:")
    btn3 = _("–†–∞—Å—à–∏—Ä–∏—Ç—å —Å–µ—Ç—å")
    btn4 = emojize(_(":link: –ü–æ–º–æ—á—å"))
    btn5 = emojize(f":bust_in_silhouette: ‚Üí {intentions_from_count}:busts_in_silhouette:")
    btn6 = _("–ú–µ–Ω—é")

    markup.row(btn1, btn2, btn3)
    markup.add(btn4, btn5, btn6)

    return markup


async def markup_faq_menu():
    markup_faq_menu = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup_faq_menu.add(_("–ü—Ä–æ –±–æ—Ç–∞"), _("–û–ø–∏—Å–∞–Ω–∏–µ –º–µ–Ω—é"), _("–£—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è"))
    markup_faq_menu.add(_("–ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"), _("–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–µ–π—Å—ã"), _("–ú–µ–Ω—é"))

    return markup_faq_menu


async def markup_profile_menu(lang=None):
    user_from_tg = types.User.get_current()
    user_from_db = await dbs.users.get_user(user_from_tg.id)

    status = await get_status_emoji(user_from_db.status)
    markup_profile_menu = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    if lang:
        btn1 = emojize(status) + _("–°—Ç–∞—Ç—É—Å", locale=lang)
        btn2 = emojize(":speech_balloon:") + _("–û–±–æ –º–Ω–µ", locale=lang)
        btn3 = emojize(":credit_card:") + _("–†–µ–∫–≤–∏–∑–∏—Ç—ã", locale=lang)
        btn4 = emojize(_(":footprints: –í—ã–π—Ç–∏ –∏–∑ –±–æ—Ç–∞", locale=lang))
        btn5 = _('RU‚ÜíENG', locale=lang)
        btn6 = _("–ú–µ–Ω—é", locale=lang)

        markup_profile_menu.add(btn1, btn2, btn3)
        markup_profile_menu.add(btn4, btn5, btn6)
    else:
        btn1 = emojize(status) + _("–°—Ç–∞—Ç—É—Å")
        btn2 = emojize(":speech_balloon:") + _("–û–±–æ –º–Ω–µ")
        btn3 = emojize(":credit_card:") + _("–†–µ–∫–≤–∏–∑–∏—Ç—ã")
        btn4 = emojize(_(":footprints: –í—ã–π—Ç–∏ –∏–∑ –±–æ—Ç–∞"))
        btn5 = _('RU‚ÜíENG')
        btn6 = _("–ú–µ–Ω—é")

        markup_profile_menu.add(btn1, btn2, btn3)
        markup_profile_menu.add(btn4, btn5, btn6)

    return markup_profile_menu


async def select_data_status_reply_kb():
    markup_select_data_reply_kb = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    user_from_tg = types.User.get_current()
    user_from_db = await dbs.users.get_user(user_from_tg.id)
    status = user_from_db.status

    btn1 = _("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    btn2 = _("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
    btn3 = _("–ù–∞–∑–∞–¥")

    if status == 'green':
        markup_select_data_reply_kb.add(btn2, btn3)
    else:
        markup_select_data_reply_kb.add(btn1, btn2, btn3)
    return markup_select_data_reply_kb


async def change_status_reply_kb():
    user_from_tg = types.User.get_current()
    user_from_db = await dbs.users.get_user(user_from_tg.id)
    status = user_from_db.status
    markup_status_reply_kb = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    if status == 'green':
        markup_status_reply_kb.add(emojize(":sos:"), emojize(":high_brightness:"), _("–ù–∞–∑–∞–¥"))
    elif status == 'orange':
        markup_status_reply_kb.add(emojize(":sos:"), emojize(":white_check_mark:"), _("–ù–∞–∑–∞–¥"))
    elif status == 'redorange':
        markup_status_reply_kb.add(_("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ ") + emojize(":high_brightness:"), _("–ù–∞–∑–∞–¥"))
    elif status == 'redgreen':
        markup_status_reply_kb.add(_("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ ") + emojize(":white_check_mark:"), _("–ù–∞–∑–∞–¥"))

    return markup_status_reply_kb


async def proof_change_status_reply_kb():
    markup_proof_change_status_reply_kb = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    btn1 = _("–î–∞, –∏–∑–º–µ–Ω–∏—Ç—å")
    btn2 = _("–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")

    markup_proof_change_status_reply_kb.add(btn1, btn2)
    return markup_proof_change_status_reply_kb


async def proof_return_orange_reply_kb():
    markup_proof_return_orange_reply_kb = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    btn1 = _("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
    btn2 = _("–û—Ç–º–µ–Ω–∞")

    markup_proof_return_orange_reply_kb.add(btn1, btn2)
    return markup_proof_return_orange_reply_kb


async def final_proof_change_status_reply_kb():
    markup_final_proof_change_status_reply_kb = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    btn1 = _("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
    btn2 = _("–û—Ç–º–µ–Ω–∞")

    markup_final_proof_change_status_reply_kb.add(btn1, btn2)
    return markup_final_proof_change_status_reply_kb


async def log_out_from_bot():
    markup_log_out = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup_log_out.add(_("–î–∞, —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"), _("–ù–µ—Ç, —è –æ—Å—Ç–∞—é—Å—å"))

    return markup_log_out


async def start_orange_invitation_kb(user_to):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    status = user_to.status

    intentions_to_count, intentions_to_sum = await get_intentions_count_sum_to(to_id=user_to.tg_id)

    if status == "orange":
        obligations_to_count, obligations_to_sum = await get_all_obligations_count_sum_to(to_id=user_to.tg_id,
                                                                                      user_status="orange",
                                                                                      statuses=[11, 12])
        btn1 = emojize('{}:busts_in_silhouette: ‚Üí {}'.format(intentions_to_count + obligations_to_count, user_to.name))

    elif "red" in status:
        obligations_to_count, obligations_to_sum = await get_all_obligations_count_sum_to(to_id=user_to.tg_id,
                                                                                      user_status="red",
                                                                                      statuses=[11, 12])
        btn1 = emojize('{}:busts_in_silhouette: ‚Üí {}'.format(obligations_to_count, user_to.name))

    btn2 = _('–ù–µ—Ç')
    btn3 = _('–î–∞')
    btn4 = _('–ú–µ–Ω—é')

    markup.row(btn2, btn3)
    markup.row(btn1, btn4)

    return markup


async def back_kb():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    btn1 = _('–ù–∞–∑–∞–¥')
    markup.row(btn1)

    return markup


async def requisites_menu_kb():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    requisites = await dbs.requisites.get_all_requisites()
    for req in requisites:
        if req.is_default:
            markup.row(req.name + ' (' + _('–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é') + ')')
        else:
            markup.row(req.name)

    btn1 = _('–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã')
    btn2 = _('–ù–∞–∑–∞–¥')
    markup.row(btn1, btn2)

    return markup


async def requisites_add_check_kb():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    btn1 = _('–î–∞')
    btn2 = _('–ù–µ—Ç')
    btn3 = _('–î–∞, —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
    btn4 = _('–û—Ç–º–µ–Ω–∞')

    markup.row(btn1, btn2)
    markup.row(btn3)
    markup.row(btn4)

    return markup


async def requisites_edit_kb():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    btn1 = _('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ')
    btn2 = _('–°–¥–µ–ª–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
    btn3 = _('–£–¥–∞–ª–∏—Ç—å')
    btn4 = _('–ù–∞–∑–∞–¥')

    markup.row(btn1, btn2)
    markup.row(btn3, btn4)

    return markup


async def intention_settings_kb():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    btn1 = emojize(_('–û—Ç–º–µ–Ω–∏—Ç—å :heart:'))
    btn2 = _('–ò–∑–º–µ–Ω–∏—Ç—å')
    btn3 = emojize(_('–í :handshake:'))
    btn4 = _('–ù–∞–∑–∞–¥')
    btn5 = emojize(_('–ò—Å–ø–æ–ª–Ω–∏—Ç—å :heart:'))
    btn6 = _('–ú–µ–Ω—é')

    markup.row(btn1, btn2, btn3)
    markup.row(btn4, btn5, btn6)

    return markup


async def proof_yes_no_kb():
    markup_proof_yes_no_kb = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    btn1 = _("–î–∞")
    btn2 = _("–ù–µ—Ç")

    markup_proof_yes_no_kb.add(btn1, btn2)
    return markup_proof_yes_no_kb


async def proof_obligation_kb():
    markup_proof_obligation_kb = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    btn1 = emojize(_("–î–∞, —è –∏—Å–ø–æ–ª–Ω–∏–ª :handshake:"))
    btn2 = _("–ù–∞–∑–∞–¥")

    markup_proof_obligation_kb.add(btn1, btn2)
    return markup_proof_obligation_kb


async def check_intention_for_me():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    btn1 = emojize(_("–ü–æ–ø—Ä–æ—Å–∏—Ç—å :heart: ‚Üí :handshake:"))
    btn2 = _("–ù–∞–∑–∞–¥")
    btn3 = _("–ú–µ–Ω—é")

    markup.add(btn1, btn2, btn3)
    return markup


async def check_obligation_for_me():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    btn1 = _("–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ")
    # btn2 = emojize(_("–ü—Ä–æ—Å—Ç–∏—Ç—å :handshake:"))
    btn3 = _("–ù–∞–∑–∞–¥")
    btn4 = _("–ú–µ–Ω—é")

    markup.add(btn1, btn3, btn4)
    return markup


async def markup_edit_profile():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    btn1 = _("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
    btn2 = _("–ò–∑–º–µ–Ω–∏—Ç—å –æ–±–æ –º–Ω–µ")
    btn3 = _("–ù–∞–∑–∞–¥")

    markup.add(btn1, btn2, btn3)
    return markup

