from datetime import date

from aiogram.dispatcher import FSMContext
from aiogram.utils.emoji import emojize

from models.db_service import DBService
from loader import _

dbs = DBService()


async def get_status_emoji(text):
    if text == "green":
        status = emojize(":white_check_mark:")
    elif text == "orange":
        status = emojize(":high_brightness:")
    elif 'red' in text:
        status = emojize(":sos:")
    else:
        status = ""
    return status


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ —á–∏—Å–ª–æ –∏ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π —Ç–æ–∂–µ
async def is_digit(string):
    if string.isdigit():
        if int(string) > 0:
            if int(string) == abs(int(string)):
                return True
        else:
            return False
    else:
        try:
            if float(string):
                if float(string) == abs(float(string)):
                    return True
        except ValueError:
            return False


async def make_hash(text):
    hash = text.encode().hex()
    return hash


async def ref_info(text):
    bytes_object = bytes.fromhex(text)
    text = bytes_object.decode("ASCII")
    text = text.split('+')
    return text


async def create_link(botname, from_id, to_id):
    ref = '{}+{}'.format(from_id, to_id)
    hash = await make_hash(ref)
    link = f"https://t.me/{botname}?start={hash}"
    return link


async def get_intentions_count_sum_to(to_id, user_status="orange"):
    intentions_to = await dbs.intentions.get_intentions(to_id=to_id, user_status=user_status, status=1)

    sum = 0
    count = 0
    for intention in intentions_to:
        count += 1
        sum += intention.payment

    return count, sum


async def get_intentions_count_sum_from(from_id):
    intentions_from = await dbs.intentions.get_intentions(from_id=from_id, status=1)

    sum = 0
    count = 0
    for intention in intentions_from:
        count += 1
        sum += intention.payment

    return count, sum


async def get_all_obligations_count_sum_to(to_id, statuses, user_status=None):
    if user_status:
        obligations_from = await dbs.intentions.get_intentions(statuses=statuses, to_id=to_id, user_status=user_status)
    else:
        obligations_from = await dbs.intentions.get_intentions(statuses=statuses, to_id=to_id)

    sum = 0
    count = 0
    for obligation in obligations_from:
        count += 1
        sum += obligation.payment

    return count, sum


async def get_all_obligations_count_sum_from(from_id, statuses):
    obligations_from = await dbs.intentions.get_intentions(statuses=statuses, from_id=from_id)

    sum = 0
    count = 0
    for obligation in obligations_from:
        count += 1
        sum += obligation.payment

    return count, sum


async def get_all_obligations_completed_from(from_id):
    obligations_from = await dbs.history_intention.read_history_intention(from_id=from_id)

    sum = 0
    count = 0
    for obligation in obligations_from:
        count += 1
        sum += obligation.payment

    return count, sum


async def get_all_obligations_completed_to(to_id):
    obligations_from = await dbs.history_intention.read_history_intention(to_id=to_id)

    sum = 0
    count = 0
    for obligation in obligations_from:
        count += 1
        sum += obligation.payment

    return count, sum


async def get_all_info_text_user(bot_username, telegram_id):
    user = await dbs.users.get_user(telegram_id)
    status = await get_status_emoji(user.status)
    link = await create_link(bot_username, telegram_id, telegram_id)

    text = f'<a href="tg://user?id={user.tg_id}">{user.name}</a>  {status}\n'

    if user.status == "green":
        statuses = [1, 11, 12]

        intentions_from = await dbs.intentions.get_intentions(statuses=statuses, from_id=telegram_id)

        if user.link:
            text += _("–ò–Ω—Ñ–æ ") + emojize(f":speech_balloon: : {user.link}\n")

        text += emojize(f"\n:bust_in_silhouette:‚Üí{len(intentions_from)}:busts_in_silhouette:")

    elif user.status == "orange":
        intentions_to_count, intentions_to_sum = await get_intentions_count_sum_to(to_id=telegram_id)
        obligations_to_count, obligations_to_sum = await get_all_obligations_count_sum_to(to_id=telegram_id,
                                                                                          user_status="orange",
                                                                                          statuses=[11, 12])
        obligations_13_to_count, obligations_13_to_sum = await get_all_obligations_count_sum_to(to_id=telegram_id,
                                                                                                user_status="orange",
                                                                                                statuses=[13])
        sum_to = obligations_to_sum + obligations_13_to_sum
        count_to = intentions_to_count + obligations_to_count + obligations_13_to_count

        intentions_from_count, intentions_from_sum = await get_intentions_count_sum_from(from_id=telegram_id)
        obligations_from_count, obligations_from_sum = await get_all_obligations_count_sum_from(from_id=telegram_id,
                                                                                                statuses=[11, 12])
        obligations_13_from_count, obligations_13_from_sum = await get_all_obligations_count_sum_from(
                                                                                                from_id=telegram_id,
                                                                                                statuses=[13])
        count_from = intentions_from_count + obligations_from_count + obligations_13_from_count

        user_from_statuses = await dbs.statuses.get_status(telegram_id=telegram_id, type='orange')
        payment = user_from_statuses.payment
        payment_to = (payment - sum_to) if payment > sum_to else 0

        text += _("–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–º–æ—â–∏ ") + emojize(":link: : ") + '<a href="{}">'.format(link) + _("–ü–æ–º–æ—á—å") + '</a>\n'
        if user.link:
            text += _("–ò–Ω—Ñ–æ ") + emojize(f":speech_balloon: : {user.link}\n")

        requisite = await dbs.requisites.get_requisite_for_user(telegram_id)
        if requisite:
            req_name = requisite.name + " " + requisite.value
            text += _("–î–µ—Ç–∞–ª–∏ ") + emojize(":credit_card: : {}").format(req_name) + "\n\n"
        else:
            text += "\n"

        text += emojize(f"{count_to}:busts_in_silhouette:‚Üí:bust_in_silhouette:"
                        f"({intentions_to_sum}:heart: / {payment_to}:pray:)\n")
        text += emojize(f":bust_in_silhouette:‚Üí{count_from}:busts_in_silhouette:"
                        f"({intentions_from_sum}:heart: / {obligations_from_sum}:handshake: / {obligations_13_from_sum}üëç)")

    else:
        user_from_statuses = await dbs.statuses.get_status(telegram_id, type='red')
        payment = user_from_statuses.payment
        finish_date = user_from_statuses.finish_date
        days_left = (finish_date - date.today()).days

        obligations_to = await dbs.intentions.get_intentions(statuses=[11, 12, 13], to_id=telegram_id,
                                                             user_status="red")
        obligations_to_sum = 0
        for obligation in obligations_to:
            obligations_to_sum += obligation.payment

        payment_to = (payment - obligations_to_sum) if payment > obligations_to_sum else 0

        text += _("–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–º–æ—â–∏ ") + emojize(":link: :") + '<a href="{}">'.format(link) + _("–ü–æ–º–æ—á—å") + '</a>\n'
        if user.link:
            text += _("–ò–Ω—Ñ–æ ") + emojize(f":speech_balloon: : {user.link}\n")

        requisite = await dbs.requisites.get_requisite_for_user(telegram_id)
        if requisite:
            req_name = requisite.name + " " + requisite.value
            text += _("–î–µ—Ç–∞–ª–∏ ") + emojize(":credit_card: :{}").format(req_name) + "\n\n"
        else:
            text += "\n\n"

        text += emojize(
            f"{len(obligations_to)}:busts_in_silhouette:‚Üí:bust_in_silhouette:({payment_to}:pray: / {days_left}") + _(
            "–¥–Ω–µ–π)")

    return text


async def get_info_text_user_for_invite(telegram_id, bot_username, for_me=None):
    user = await dbs.users.get_user(telegram_id)
    status_emoji = await get_status_emoji(user.status)

    if for_me:
        text = _("–í—ã {}\n").format(status_emoji)
    else:
        text_link_user = f'<a href="tg://user?id={user.tg_id}">{user.name}</a>'
        text = f"{text_link_user} {status_emoji}\n"
    link = await create_link(bot_username, telegram_id, telegram_id)

    if user.status == "orange":
        intentions_to_count, intentions_to_sum = await get_intentions_count_sum_to(to_id=telegram_id)
        obligations_to_count, obligations_to_sum = await get_all_obligations_count_sum_to(to_id=telegram_id,
                                                                                          user_status="orange",
                                                                                          statuses=[11, 12])
        obligations_13_to_count, obligations_13_to_sum = await get_all_obligations_count_sum_to(to_id=telegram_id,
                                                                                                user_status="orange",
                                                                                                statuses=[13])
        sum_to = obligations_to_sum + obligations_13_to_sum

        user_from_statuses = await dbs.statuses.get_status(telegram_id=telegram_id, type='orange')
        payment = user_from_statuses.payment
        payment_to = (payment - sum_to) if payment > sum_to else 0

        text += emojize(f"({intentions_to_sum}:heart: / {payment_to}:pray:) :link:") + '<a href="{}">'.format(link) + \
                _("–ü–æ–º–æ—á—å") + '</a>\n'

    elif 'red' in user.status:
        user_from_statuses = await dbs.statuses.get_status(telegram_id, type='red')
        payment = user_from_statuses.payment
        finish_date = user_from_statuses.finish_date
        days_left = (finish_date - date.today()).days

        obligations_to = await dbs.intentions.get_intentions(statuses=[11, 12, 13], to_id=telegram_id,
                                                             user_status="red")
        obligations_to_sum = 0
        for obligation in obligations_to:
            obligations_to_sum += obligation.payment

        payment_to = (payment - obligations_to_sum) if payment > obligations_to_sum else 0

        text += emojize(f"({payment_to}:pray: / {days_left}") + emojize(_("–¥–Ω–µ–π) :link:")) + \
                '<a href="{}">'.format(link) + _("–ü–æ–º–æ—á—å") + '</a>\n'
    return text


async def get_info_text_user_for_circle(telegram_id, bot_username):
    user = await dbs.users.get_user(telegram_id)
    link = await create_link(bot_username, telegram_id, telegram_id)
    status_emoji = await get_status_emoji(user.status)
    text_link_user = f'<a href="tg://user?id={user.tg_id}">{user.name}</a>'

    text = f"{text_link_user} {status_emoji}\n"

    if user.status == "orange":
        intentions_to_count, intentions_to_sum = await get_intentions_count_sum_to(to_id=telegram_id)
        obligations_to_count, obligations_to_sum = await get_all_obligations_count_sum_to(to_id=telegram_id,
                                                                                          user_status="orange",
                                                                                          statuses=[11, 12])
        obligations_13_to_count, obligations_13_to_sum = await get_all_obligations_count_sum_to(to_id=telegram_id,
                                                                                                user_status="orange",
                                                                                                statuses=[13])
        sum_to = obligations_to_sum + obligations_13_to_sum

        user_from_statuses = await dbs.statuses.get_status(telegram_id=telegram_id, type='orange')
        payment = user_from_statuses.payment
        payment_to = (payment - sum_to) if payment > sum_to else 0

        text += emojize(f" ({intentions_to_sum}:heart:/{payment_to} :pray:) :link:") + '<a href="{}">'.format(link) + \
                _("–ü–æ–º–æ—á—å") + '</a>\n'

    elif 'red' in user.status:
        user_from_statuses = await dbs.statuses.get_status(telegram_id, type='red')
        payment = user_from_statuses.payment
        finish_date = user_from_statuses.finish_date
        days_left = (finish_date - date.today()).days

        obligations_to = await dbs.intentions.get_intentions(statuses=[11, 12, 13], to_id=telegram_id,
                                                             user_status="red")
        obligations_to_sum = 0
        for obligation in obligations_to:
            obligations_to_sum += obligation.payment

        payment_to = (payment - obligations_to_sum) if payment > obligations_to_sum else 0

        text += emojize(f" ({payment_to}:pray:/{days_left}") + emojize(_("–¥–Ω–µ–π) :link:")) + '<a href="{}">'.format(link) + _("–ü–æ–º–æ—á—å") + '</a>\n'
    return text


async def get_short_info_text_user(telegram_id):
    user = await dbs.users.get_user(telegram_id)
    status = await get_status_emoji(user.status)
    text_link_user = f'<a href="tg://user?id={user.tg_id}">{user.name}</a>'

    text = f"{text_link_user} {status}\n"
    return text


async def get_list_invite_for_user(to_id):
    user = await dbs.users.get_user(to_id)
    status = user.status

    text = ''

    if "orange" == status:
        intentions_to_count, intentions_to_sum = await get_intentions_count_sum_to(to_id=to_id)
        obligations_to_count, obligations_to_sum = await get_all_obligations_count_sum_to(to_id=to_id,
                                                                                          user_status="orange",
                                                                                          statuses=[11, 12])

        count_to = intentions_to_count + obligations_to_count

        text = emojize(_('–£—á–∞—Å—Ç–Ω–∏–∫—É {} –ø–æ–º–æ–≥–∞—é—Ç {} :busts_in_silhouette:\n\n').format(user.name, count_to))

        list_intentions = await dbs.intentions.get_intentions(statuses=[1, 11, 12], to_id=to_id)
        for intention in list_intentions:
            text += await get_short_info_text_user(intention.from_id)
    elif "red" in status:
        obligations_to_count, obligations_to_sum = await get_all_obligations_count_sum_to(to_id=to_id,
                                                                                          user_status="red",
                                                                                          statuses=[11, 12])
        text = emojize(_('–£—á–∞—Å—Ç–Ω–∏–∫—É {} –ø–æ–º–æ–≥–∞—é—Ç {} :busts_in_silhouette:\n\n').format(user.name, obligations_to_count))

        list_intentions = await dbs.intentions.get_intentions(statuses=[11, 12], to_id=to_id)
        for intention in list_intentions:
            text += await get_short_info_text_user(intention.from_id)

    return text


async def create_dict_intention(statuses, from_id=None, to_id=None):
    dict_ = {}
    count = 1
    if from_id:
        intentions = await dbs.intentions.get_intentions(statuses=statuses, from_id=from_id)
        for intention in intentions:
            dict_[count] = intention.intention_id
            count += 1

    if to_id:
        intentions = await dbs.intentions.get_intentions(statuses=statuses, to_id=to_id)
        for intention in intentions:
            dict_[count] = intention.intention_id
            count += 1

    return dict_


async def get_sum_int_obl(telegram_id):
    user = await dbs.users.get_user(telegram_id)

    text = ""

    if user.status == "orange":
        intentions_to_count, intentions_to_sum = await get_intentions_count_sum_to(to_id=telegram_id)
        obligations_to_count, obligations_to_sum = await get_all_obligations_count_sum_to(to_id=telegram_id,
                                                                                          user_status="orange",
                                                                                          statuses=[11, 12])
        obligations_13_to_count, obligations_13_to_sum = await get_all_obligations_count_sum_to(to_id=telegram_id,
                                                                                                user_status="orange",
                                                                                                statuses=[13])
        sum_to = obligations_to_sum + obligations_13_to_sum

        user_from_statuses = await dbs.statuses.get_status(telegram_id=telegram_id, type='orange')
        payment = user_from_statuses.payment
        payment_to = (payment - sum_to) if payment > sum_to else 0

        text += emojize(f"({intentions_to_sum}:heart:/{payment_to} :pray:)")

    elif 'red' in user.status:
        user_from_statuses = await dbs.statuses.get_status(telegram_id, type='red')
        payment = user_from_statuses.payment
        finish_date = user_from_statuses.finish_date
        days_left = (finish_date - date.today()).days

        obligations_to = await dbs.intentions.get_intentions(statuses=[11, 12, 13], to_id=telegram_id,
                                                             user_status="red")
        obligations_to_sum = 0
        for obligation in obligations_to:
            obligations_to_sum += obligation.payment

        payment_to = (payment - obligations_to_sum) if payment > obligations_to_sum else 0

        text += emojize(f"({payment_to}:pray:/{days_left}") + emojize(_("–¥–Ω–µ–π)"))
    return text


async def create_list_intention(dict_intention, from_id=None, to_id=None):
    text = ""

    if from_id:
        for i in dict_intention:
            intention = await dbs.intentions.get_intention_from_id(intention_id=dict_intention[i])
            user = await dbs.users.get_user(intention.to_id)
            text_link_user = f'<a href="tg://user?id={user.tg_id}">{user.name}</a>'

            status = await get_status_emoji(user.status)
            int_and_obl = await get_sum_int_obl(intention.to_id)
            if intention.status == 1:
                text += emojize(f"{i}. {text_link_user} {status} {int_and_obl} {intention.payment} :heart:\n")
            elif intention.status == 11:
                text += emojize(f"{i}. {text_link_user} {status} {int_and_obl} {intention.payment} :handshake:\n")

    elif to_id:
        for i in dict_intention:
            intention = await dbs.intentions.get_intention_from_id(intention_id=dict_intention[i])
            user = await dbs.users.get_user(intention.from_id)
            text_link_user = f'<a href="tg://user?id={user.tg_id}">{user.name}</a>'

            status = await get_status_emoji(user.status)
            int_and_obl = await get_sum_int_obl(intention.from_id)
            if intention.status == 1:
                text += emojize(f"{i}. {text_link_user} {status} {int_and_obl} {intention.payment} :heart:\n")
            elif intention.status == 11:
                text += emojize(f"{i}. {text_link_user} {status} {int_and_obl} {intention.payment} :handshake:\n")

    return text


async def text_status_to_green():
    text = emojize(_("""
–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ :white_check_mark:
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–∞:

–ï—Å–ª–∏ –≤–∞—à —Å—Ç–∞—Ç—É—Å –±—ã–ª :high_brightness: –∏–ª–∏ :sos:, –≤—Å–µ :heart: —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –í–∞—à—É –ø–æ–ª—å–∑—É –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã.

–í—Å–µ ü§ù —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –í–∞—à—É –ø–æ–ª—å–∑—É –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ —Å–∏–ª–µ. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ ü§ù –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é "–û—Ä–≥–∞–Ω–∞–π–∑–µ—Ä"
    """))
    return text


async def text_status_to_orange():
    text = emojize(_("""
–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ :high_brightness:
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–∞
    """))
    return text


async def text_input_sum_orange(sum):
    text = emojize(_("""–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
–°—Ç–∞—Ç—É—Å: :high_brightness:
–ü–µ—Ä–∏–æ–¥: –ï–∂–µ–º–µ—Å—è—á–Ω–æ
–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Å—É–º–º–∞: {}‚Ç¨

–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ?
–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–≤—è–∑–∞–Ω—ã —Å –≤–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –≠–∫—Å–æ–¥—É—Å –±–æ—Ç–∞, –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.""")).format(sum)
    return text


async def text_return_to_orange(sum):
    text = emojize(_("""
–í–∞—à —Å—Ç–∞—Ç—É—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ :high_brightness:
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
    
–°—Ç–∞—Ç—É—Å: :high_brightness:
–ü–µ—Ä–∏–æ–¥: –ï–∂–µ–º–µ—Å—è—á–Ω–æ
–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Å—É–º–º–∞: {}‚Ç¨

–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ?
–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–≤—è–∑–∞–Ω—ã —Å –≤–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –≠–∫—Å–æ–¥—É—Å –±–æ—Ç–∞, –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    """)).format(sum)
    return text


async def text_for_status_menu(telegram_id):
    user = await dbs.users.get_user(telegram_id)
    status = user.status
    emoji_status = await get_status_emoji(status)
    if status == 'green':
        text = emojize(_("""–í–∞—à —Å—Ç–∞—Ç—É—Å: :white_check_mark:
–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã —Å–≤—è–∑–∞–Ω—ã, –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é '–£—á–∞—Å—Ç–Ω–∏–∫–∏'"""))
        return text
    elif "red" in status:
        status_from_db = await dbs.statuses.get_status(telegram_id, "red")

        finish_date = status_from_db.finish_date
        days_stay = (finish_date - date.today()).days
        text = emoji_status + emojize(":moneybag: {}‚Ç¨".format(status_from_db.payment)) + _(
            ", –æ—Å—Ç–∞–ª–æ—Å—å {} –¥–Ω–µ–π".format(days_stay))
        return text
    elif status == 'orange':
        status_from_db = await dbs.statuses.get_status(telegram_id, "orange")
        text = emoji_status + emojize(":moneybag: {}‚Ç¨".format(status_from_db.payment)) + _(", –µ–∂–µ–º–µ—Å—è—á–Ω–æ")
        return text


async def text_intention_to(intention_id):
    intention = await dbs.intentions.get_intention_from_id(intention_id)
    user = await dbs.users.get_user(intention.from_id)
    status = await get_status_emoji(user.status)
    text_link_user = f'<a href="tg://user?id={user.tg_id}">{user.name}</a>'

    date = intention.create_date.date()

    text = emojize("{}\n{} ‚Üí :heart: {} {}").format(date, text_link_user, status, intention.payment, intention.currency)
    return text


async def text_obligation_to(obligation_id):
    obligation = await dbs.intentions.get_intention_from_id(obligation_id)
    user = await dbs.users.get_user(obligation.from_id)
    status = await get_status_emoji(user.status)
    text_link_user = f'<a href="tg://user?id={user.tg_id}">{user.name}</a>'

    text = emojize("{} {} ‚Üí :handshake: {} {}").format(text_link_user, status, obligation.payment,
                                                       obligation.currency)
    return text


async def text_need_intention_to_obligation():
    text = emojize(_("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ :heart:‚Üí:handshake:"))
    return text


async def text_need_intention_to_sponsor(intention_id):
    intention = await dbs.intentions.get_intention_from_id(intention_id)
    user = await dbs.users.get_user(intention.to_id)
    status = await get_status_emoji(user.status)

    text = emojize(_("–ü—Ä–æ—Å—å–±–∞ :heart:‚Üí:handshake: –¥–ª—è {} {} –Ω–∞ —Å—É–º–º—É {} {}")).format(user.name, status,
                                                                                     intention.payment,
                                                                                     intention.currency)
    return text


async def text_need_obligation(obligation_id):
    obligation = await dbs.intentions.get_intention_from_id(obligation_id)
    user = await dbs.users.get_user(obligation.from_id)
    status = await get_status_emoji(user.status)
    text = emojize(_("–£—á–∞—Å—Ç–Ω–∏–∫—É {} {} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å "
                     "–ø—Ä–æ—Å—å–±–æ–π –∏—Å–ø–æ–ª–Ω–∏—Ç—å ü§ù –Ω–∞ —Å—É–º–º—É {} {}")).format(user.name,
                                                                     status,
                                                                     obligation.payment,
                                                                     obligation.currency)
    return text


async def text_need_obligation_to_sponsor(obligation_id):
    obligation = await dbs.intentions.get_intention_from_id(obligation_id)
    user = await dbs.users.get_user(obligation.to_id)
    status = await get_status_emoji(user.status)
    requisite = await dbs.requisites.get_requisite_for_user(obligation.to_id)
    if requisite:
        req_name = requisite.name + " " + requisite.value
    else:
        req_name = _("—Å–ø—Ä–æ—Å–∏—Ç—å –ª–∏—á–Ω–æ")

    text_link_user = f'<a href="tg://user?id={user.tg_id}">{user.name}</a>'
    text = emojize(_("–í–∞—à–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ ü§ù –Ω–∞ —Å—É–º–º—É {} {} –≤ –ø–æ–ª—å–∑—É {} {}\n\n"
                     ":credit_card:–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–º–æ—â–∏:\n{}")).format(obligation.payment,
                                                                       obligation.currency,
                                                                       text_link_user,
                                                                       status,
                                                                       req_name)
    return text


async def text_forgive_obligation_to(obligation_id):
    obligation = await dbs.intentions.get_intention_from_id(obligation_id)
    user = await dbs.users.get_user(obligation.to_id)
    status = await get_status_emoji(user.status)
    text_link_user = f'<a href="tg://user?id={user.tg_id}">{user.name}</a>'

    text = emojize(_("ü§ù –ø–µ—Ä–µ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º {} {} –Ω–∞ —Å—É–º–º—É {} {} –ø—Ä–æ—â–µ–Ω–æ")).format(text_link_user,
                                                                                 status,
                                                                                 obligation.payment,
                                                                                 obligation.currency)
    return text


async def text_proof_forgive_obligation_from(obligation_id):
    obligation = await dbs.intentions.get_intention_from_id(obligation_id)
    user = await dbs.users.get_user(obligation.from_id)
    status = await get_status_emoji(user.status)
    text_link_user = f'<a href="tg://user?id={user.tg_id}">{user.name}</a>'

    text = emojize(_("–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å—Ç–∏—Ç—å ü§ù —É—á–∞—Å—Ç–Ω–∏–∫—É {} {} –Ω–∞ {} {}?")).format(text_link_user,
                                                                                status,
                                                                                obligation.payment,
                                                                                obligation.currency)
    return text


async def text_final_forgive_obligation_from(obligation_id):
    obligation = await dbs.intentions.get_intention_from_id(obligation_id)
    user = await dbs.users.get_user(obligation.from_id)
    status = await get_status_emoji(user.status)
    text_link_user = f'<a href="tg://user?id={user.tg_id}">{user.name}</a>'

    text = emojize(_("–í—ã –ø—Ä–æ—Å—Ç–∏–ª–∏ ü§ù —É—á–∞—Å—Ç–Ω–∏–∫–∞ {} {} –Ω–∞ {} {}")).format(text_link_user,
                                                                        status,
                                                                        obligation.payment,
                                                                        obligation.currency)
    return text


async def text_sum_digit():
    text = _('–í–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≤–∏–¥–µ —Ü–∏—Ñ—Ä –∏ –±–æ–ª—å—à–µ 0')
    return text


async def check_number_dict():
    text = _('–¢–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä')
    return text


async def is_it_requisites(value, requisites):
    for i in requisites:
        if i.name in value:
            return i
    return False


async def show_help_to_me(telegram_id, bot_username, state: FSMContext):

    list_intentions = await dbs.intentions.get_intentions(statuses=[1, 11, 12, 13], to_id=telegram_id)
    list_intentions_ids = set([intention.from_id for intention in list_intentions])

    string_name = ''
    dict_socium = {}
    count = 0
    for id_help in list_intentions_ids:
        count += 1
        dict_socium[count] = id_help
        text_user = await get_info_text_user_for_circle(id_help, bot_username)
        string_name += f"{count}. {text_user}\n"

    await state.update_data(dict_socium=dict_socium)

    return string_name


async def show_help_from_me(telegram_id, bot_username, state: FSMContext):

    list_intentions = await dbs.intentions.get_intentions(statuses=[1, 11, 12, 13], from_id=telegram_id)
    set_intentions_ids = set([intention.to_id for intention in list_intentions])

    string_name = ''
    dict_socium = {}
    count = 0
    for id_help in set_intentions_ids:
        count += 1
        dict_socium[count] = id_help
        text_user = await get_info_text_user_for_circle(id_help, bot_username)
        string_name += f"{count}. {text_user}\n"

    await state.update_data(dict_socium=dict_socium)

    return string_name


async def send_notify_for_auto_end_red(user_id):
    user = await dbs.users.get_user(user_id)
    text_link_user = f'<a href="tg://user?id={user.tg_id}">{user.name}</a>'

    text_for_other_people = emojize(_("{} –∑–∞–≤–µ—Ä—à–∏–ª —Å–±–æ—Ä –ø–æ–º–æ—â–∏ –≤ :sos: —Å—Ç–∞—Ç—É—Å–µ\n" \
                                      "–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–º–æ—â–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–±–æ—Ä–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤ :hourglass: "
                                      "–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω—ã/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã.")).format(text_link_user)

    return text_for_other_people


async def text_input_number_people():
    result_text = _('\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º –£—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–ø–∏—Å–∫–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ –Ω–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')
    return result_text


async def text_faq():
    result_text = _("""–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–∏—Å—Ç–µ–º–µ –≠–∫—Å–æ–¥—É—Å –º–æ–∂–Ω–æ, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É https://t.me/Exodus_canal_1

–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –ø—Ä–æ –Ω–µ—è—Å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤ —Ö–æ–¥–µ –æ—Å–≤–æ–µ–Ω–∏—è –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞: https://t.me/Exodus_canal_1/4

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∑–∞–∏–º–Ω–æ–π –ø–æ–º–æ—â–∏, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º —É—Å–ª–æ–≤–∏–µ–º –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∏ –¥–æ–≤–µ—Ä–∏—è.

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.""")

    return result_text