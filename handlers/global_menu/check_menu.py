from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.emoji import emojize

from data.symbols import text_about, text_menu, text_convention, text_how_start, text_case
from loader import dp, bot, _
from keyboards.reply.reply_kb import markup_general_menu, markup_profile_menu, change_status_reply_kb, \
    log_out_from_bot, select_data_status_reply_kb, proof_change_status_reply_kb, proof_return_orange_reply_kb, back_kb, \
    requisites_menu_kb, markup_edit_profile
from models.db_service import DBService
from states.menu_states import Menu, ProfileMenu, StatusChange, DataStatusChange, AboutMe, Requisites, IntentionFrom, \
    IntentionTo, ProofObligation, BadObligation
from utils.functions import text_status_to_green, text_return_to_orange, text_for_status_menu, text_status_to_orange, \
    get_status_emoji, create_dict_intention, create_list_intention

dbs = DBService()


async def global_menu(message, state: FSMContext):
    await state.finish()
    await Menu.global_menu.set()
    markup = await markup_general_menu()
    await bot.send_message(message.chat.id, _('–ú–µ–Ω—é'), reply_markup=markup)


async def intention_from_me(message, state: FSMContext):
    markup = await back_kb()
    intentions = await dbs.intentions.get_intentions(statuses=[1], from_id=message.chat.id)
    obligations = await dbs.intentions.get_intentions(statuses=[11], from_id=message.chat.id)

    dict_intention_from = await create_dict_intention(statuses=[1, 11], from_id=message.chat.id)
    list_intention = await create_list_intention(dict_intention_from, from_id=True)
    text = emojize(_("–í–∞–º–∏ –∑–∞–ø–∏—Å–∞–Ω–æ {} :heart: –∏ {} :handshake:\n{}\n")).format(len(intentions), len(obligations),
                                                                                list_intention)
    text += _("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å")
    await IntentionFrom.list_intention.set()
    await state.update_data(dict_intention_from=dict_intention_from)
    await bot.send_message(message.chat.id, text, reply_markup=markup)


async def intention_to_me(message, state: FSMContext):
    markup = await back_kb()
    intentions = await dbs.intentions.get_intentions(statuses=[1], to_id=message.chat.id)
    obligations = await dbs.intentions.get_intentions(statuses=[11], to_id=message.chat.id)

    dict_intention_to = await create_dict_intention(statuses=[1, 11], to_id=message.chat.id)
    list_intention = await create_list_intention(dict_intention_to, to_id=True)
    text = emojize(_("–í –≤–∞—à—É –ø–æ–ª—å–∑—É {} :heart: –∏ {} :handshake:\n{}\n")).format(len(intentions), len(obligations),
                                                                                list_intention)
    text += _("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å")
    await IntentionTo.list_intention.set()
    await state.update_data(dict_intention_to=dict_intention_to)
    await bot.send_message(message.chat.id, text, reply_markup=markup)


async def list_proof_obligations(message, state: FSMContext):
    markup = await back_kb()
    user_id = message.chat.id
    text_from = emojize(_(":bust_in_silhouette:->:busts_in_silhouette: –ß—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ "
                          "–≤–∞—à–µ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é.\n"))
    text_to = emojize(_(":busts_in_silhouette:->:bust_in_silhouette: –ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ "
                        "–≤–∞—à—É –ø–æ–ª—å–∑—É, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é.\n"))
    text_all = ''

    dict_obligation_proof = await create_dict_intention(statuses=[12], from_id=user_id, to_id=user_id)

    count_from = 0
    count_to = 0

    for id in dict_obligation_proof:
        obligation = await dbs.intentions.get_intention_from_id(dict_obligation_proof[id])

        if obligation.from_id == user_id:
            count_from += 1
            user = await dbs.users.get_user(obligation.to_id)
            status = await get_status_emoji(user.status)
            text_link_user = f'<a href="tg://user?id={user.tg_id}">{user.name}</a>'

            text_from += emojize(f"{id}. {obligation.payment} :handshake: ‚Üí üëç ‚Üí {text_link_user} {status} \n")
        elif obligation.to_id == user_id:
            count_to += 1
            user = await dbs.users.get_user(obligation.from_id)
            status = await get_status_emoji(user.status)
            text_link_user = f'<a href="tg://user?id={user.tg_id}">{user.name}</a>'

            text_to += emojize(f"{id}. {text_link_user} {status} ‚Üí {obligation.payment} :handshake: ‚Üí üëç\n")

    if count_from > 0:
        text_all += text_from
    if count_to > 0:
        text_all += "\n" + text_to

    text_all += _("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")

    await ProofObligation.list_obligation.set()
    await state.update_data(dict_obligation_proof=dict_obligation_proof)
    await bot.send_message(message.chat.id, text_all, reply_markup=markup)


async def list_completed_obligations(user_id):
    text = _("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤:\n")

    completed_to = await dbs.history_intention.read_history_intention(to_id=user_id)
    for obligation in completed_to:
        user = await dbs.users.get_user(obligation.from_id)
        text_link_user = f'<a href="tg://user?id={user.tg_id}">{user.name}</a>'
        status_emoji = await get_status_emoji(obligation.user_status)
        text += _("{}     {} {} {} ‚Üí –≤–∞–º {}\n").format(obligation.create_date.date(),
                                                       obligation.payment,
                                                       obligation.currency,
                                                       text_link_user,
                                                       status_emoji)

    text += "\n"

    completed_from = await dbs.history_intention.read_history_intention(from_id=user_id)
    for obligation in completed_from:
        user = await dbs.users.get_user(obligation.to_id)
        text_link_user = f'<a href="tg://user?id={user.tg_id}">{user.name}</a>'
        status_emoji = await get_status_emoji(obligation.user_status)
        text += _("{}     {} {} –≤—ã ‚Üí {} {}\n").format(obligation.create_date.date(),
                                                      obligation.payment,
                                                      obligation.currency,
                                                      text_link_user,
                                                      status_emoji)

    return text


async def bad_history_intention(user_id, state: FSMContext):
    list_bad_obligation_from = await dbs.intentions.get_intentions(statuses=[110, 120], from_id=user_id)
    list_bad_obligation_to = await dbs.intentions.get_intentions(statuses=[110, 120], to_id=user_id)

    text_from = ''
    text_to = ''
    count = 0
    dict_bad_obligation = {}
    if len(list_bad_obligation_from) != 0:
        text_from += '–í–∞—à–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n'
        for intention in list_bad_obligation_from:
            count += 1
            dict_bad_obligation[count] = intention.intention_id
            user_from = await dbs.users.get_user(intention.to_id)
            text_link_user = f'<a href="tg://user?id={user_from.tg_id}">{user_from.name}</a>'

            if intention.status == 110:
                text_from += emojize(f'{count})     {intention.create_date.date().strftime("%m-%Y")} –≤—ã –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª–∏ {intention.payment}:handshake: –≤ –ø–æ–ª—å–∑—É {text_link_user}\n')
            else:
                text_from += emojize(f'{count})     {intention.create_date.date().strftime("%m-%Y")}     {intention.payment} :handshake: ‚Üí üëç –≤—ã –∂–¥–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç {text_link_user}\n')

    if len(list_bad_obligation_to) != 0:
        text_to += '–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É:\n'
        for intention in list_bad_obligation_to:
            count += 1
            dict_bad_obligation[count] = intention.intention_id
            user_to = await dbs.users.get_user(intention.from_id)
            text_link_user = f'<a href="tg://user?id={user_to.tg_id}">{user_to.name}</a>'

            if intention.status == 110:
                text_to += emojize(f'{count})     {intention.create_date.date().strftime("%m-%Y")}     {text_link_user} –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª {intention.payment} :handshake: –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É\n')
            else:
                text_to += emojize(f'{count})     {intention.create_date.date().strftime("%m-%Y")}     {intention.payment} :handshake: ‚Üí  üëç {text_link_user} –∂–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç –≤–∞—Å\n')

    bot_text = f'{text_from}\n\n\
{text_to}\n'
    bot_text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"

    markup = await back_kb()

    await BadObligation.list_obligation.set()
    await state.update_data(dict_bad_obligation=dict_bad_obligation)
    await bot.send_message(user_id, bot_text, reply_markup=markup)


@dp.message_handler(state=Menu.organaiser_menu)
async def organaiser_menu_check(message: types.Message, state: FSMContext):
    in_text = message.text
    await bot.delete_message(message.chat.id, message.message_id)

    if emojize(":bust_in_silhouette:‚Üí:busts_in_silhouette:") in in_text:
        await intention_from_me(message, state)
        return

    elif emojize(":busts_in_silhouette:‚Üí:bust_in_silhouette:") in in_text:
        await intention_to_me(message, state)
        return

    elif emojize(":handshake:‚Üíüëç\n0‚Üí:bust_in_silhouette:‚Üí0") in in_text:
        text = emojize(_("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö :handshake:"))
        await bot.send_message(message.chat.id, text)
        return
    elif emojize("–ê—Ä—Ö–∏–≤ üëç\n0/0‚Üí:bust_in_silhouette:‚Üí0/0") in in_text:
        text = emojize(_("–£ –≤–∞—Å –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö :handshake:"))
        await bot.send_message(message.chat.id, text)
        return
    elif emojize(":handshake:‚Üíüëç") in in_text:
        await list_proof_obligations(message, state)
        return

    elif emojize(_("–ê—Ä—Ö–∏–≤ üëç")) in in_text:
        text = await list_completed_obligations(message.chat.id)
        await bot.send_message(message.chat.id, text)
        return
    elif emojize(":hourglass:\n0") in in_text:
        text = _("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        await bot.send_message(message.chat.id, text)
        return
    elif emojize(":hourglass:") in in_text:
        await bad_history_intention(message.chat.id, state)
        return
    elif _('–ú–µ–Ω—é') in in_text:
        await global_menu(message, state)
        return


async def edit_lang_user(message: types.Message, lang):
    await dbs.users.set_language(lang)
    markup = await markup_profile_menu(lang)
    await bot.send_message(message.chat.id, _("–í–∞—à —è–∑—ã–∫ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω", locale=lang), reply_markup=markup)


@dp.message_handler(state=Menu.profile_menu)
async def profile_menu_check(message: types.Message, state: FSMContext):
    in_text = message.text
    await bot.delete_message(message.chat.id, message.message_id)
    user = await dbs.users.get_user(message.chat.id)
    if _("–°—Ç–∞—Ç—É—Å") in in_text:
        await ProfileMenu.status.set()
        markup = await select_data_status_reply_kb()
        text = await text_for_status_menu(message.chat.id)
        await bot.send_message(message.chat.id, text, reply_markup=markup)
    elif _("–û–±–æ –º–Ω–µ") in in_text:
        await AboutMe.check_input.set()
        markup = await markup_edit_profile()
        if user.link:
            link = user.link
        else:
            link = '–Ω–µ –∑–∞–¥–∞–Ω—ã'

        bot_text = _('–¢–µ–∫—É—â–µ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}\n').format(user.name)
        bot_text += _('–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ: {}').format(link)
        await bot.send_message(message.chat.id, bot_text, reply_markup=markup)

    elif _("–†–µ–∫–≤–∏–∑–∏—Ç—ã") in in_text:
        requisites = await dbs.requisites.get_all_requisites()
        if requisites:
            text = _('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
        else:
            text = _('–í—ã –µ—â–µ –Ω–µ –∑–∞–¥–∞–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã')

        await Requisites.requisites_menu.set()
        markup = await requisites_menu_kb()
        await bot.send_message(message.chat.id, text, reply_markup=markup)
    elif _("–í—ã–π—Ç–∏") in in_text:
        await ProfileMenu.log_out.set()
        markup = await log_out_from_bot()
        await bot.send_message(message.chat.id, _("–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –±–æ—Ç–∞ –∏ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å?"),
                               reply_markup=markup)
    elif "RU‚Üí" in in_text:
        await edit_lang_user(message, "en")
    elif "ENG‚Üí" in in_text:
        await edit_lang_user(message, "ru")
    elif _('–ú–µ–Ω—é') in in_text:
        await global_menu(message, state)

    return


@dp.message_handler(state=ProfileMenu.log_out)
async def profile_menu_log_out_check(message: types.Message, state: FSMContext):
    in_text = message.text
    await bot.delete_message(message.chat.id, message.message_id)

    if _("–î–∞, —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å") in in_text:
        # await dbs.users.delete_user(message.chat.id)
        markup = types.ReplyKeyboardRemove()
        await bot.send_message(message.chat.id, _("–í—ã —É–¥–∞–ª–∏–ª–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), reply_markup=markup)
        await state.finish()
    elif _("–ù–µ—Ç, —è –æ—Å—Ç–∞—é—Å—å") in in_text:
        await Menu.profile_menu.set()
        markup = await markup_profile_menu()
        await bot.send_message(message.chat.id, _("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å!"), reply_markup=markup)


@dp.message_handler(state=ProfileMenu.status)
async def select_data_status_check(message: types.Message):
    in_text = message.text
    await bot.delete_message(message.chat.id, message.message_id)

    if _("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ") in in_text:
        user = await dbs.users.get_user(message.chat.id)
        markup = await proof_change_status_reply_kb()
        status_emoji = await get_status_emoji(user.status)
        text = status_emoji + _(
            "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")

        if user.status == 'orange':
            await DataStatusChange.proof_change_orange.set()
            await bot.send_message(message.chat.id, text, reply_markup=markup)
        elif 'red' in user.status:
            await DataStatusChange.proof_change_red.set()
            await bot.send_message(message.chat.id, text, reply_markup=markup)

    elif _("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å") in in_text:
        await StatusChange.change_status.set()
        markup = await change_status_reply_kb()
        await bot.send_message(message.chat.id, _("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å"), reply_markup=markup)

    elif _("–ù–∞–∑–∞–¥") in in_text:
        await Menu.profile_menu.set()
        markup = await markup_profile_menu()
        await bot.send_message(message.chat.id, _("–ü—Ä–æ—Ñ–∏–ª—å"), reply_markup=markup)


@dp.message_handler(state=StatusChange.change_status)
async def profile_menu_status_check(message: types.Message):
    in_text = message.text
    await bot.delete_message(message.chat.id, message.message_id)

    if emojize(":sos:") in in_text:
        text = emojize(_("–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ :sos:\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–∞"))
        markup = await proof_change_status_reply_kb()
        await StatusChange.proof_change_red.set()
        await bot.send_message(message.chat.id, text, reply_markup=markup)
        return

    elif emojize(":white_check_mark:") in in_text:
        await StatusChange.proof_change_green.set()
        markup = await proof_change_status_reply_kb()
        text = await text_status_to_green()
        await bot.send_message(message.chat.id, text, reply_markup=markup)
        return

    elif (_("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ ") + emojize(":high_brightness:")) in in_text:
        await StatusChange.return_to_orange.set()
        markup = await proof_return_orange_reply_kb()

        sum = await dbs.statuses.get_status(message.chat.id, "orange")
        text = await text_return_to_orange(sum.payment)
        await bot.send_message(message.chat.id, text, reply_markup=markup)
        return

    elif emojize(":high_brightness:") in in_text:
        await StatusChange.proof_change_orange.set()
        markup = await proof_change_status_reply_kb()
        text = await text_status_to_orange()
        await bot.send_message(message.chat.id, text, reply_markup=markup)
        return
    elif _("–ù–∞–∑–∞–¥") in in_text:
        await ProfileMenu.status.set()
        markup = await select_data_status_reply_kb()
        text = await text_for_status_menu(message.chat.id)
        await bot.send_message(message.chat.id, text, reply_markup=markup)
        return


@dp.message_handler(state=Menu.faq_menu)
async def faq_menu_check(message: types.Message, state: FSMContext):
    in_text = message.text
    await bot.delete_message(message.chat.id, message.message_id)

    if _("–ü—Ä–æ –±–æ—Ç–∞") in in_text:
        text = await text_about()
        await bot.send_message(message.chat.id, text, disable_web_page_preview=True)
    elif _("–û–ø–∏—Å–∞–Ω–∏–µ –º–µ–Ω—é") in in_text:
        text = await text_menu()
        await bot.send_message(message.chat.id, text, disable_web_page_preview=True)
    elif _("–£—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è") in in_text:
        text = await text_convention()
        await bot.send_message(message.chat.id, text, disable_web_page_preview=True)
    elif _("–ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è") in in_text:
        text = await text_how_start()
        await bot.send_message(message.chat.id, text, disable_web_page_preview=True)
    elif _("–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–µ–π—Å—ã") in in_text:
        text = await text_case()
        await bot.send_message(message.chat.id, text, disable_web_page_preview=True)
    elif _('–ú–µ–Ω—é') in in_text:
        await global_menu(message, state)

    return
