import asyncio
from datetime import datetime

from aiogram.utils.emoji import emojize
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from models.db_service import DBService
from loader import _

# –ü–æ–º–æ—â—å –≤ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª–∞ cron
# https://crontab.guru
from utils.util_bot import send_message

dbs = DBService()


async def first_day_month():
    intentions = await dbs.intentions.update_intention_status(1, 0, active=False)
    for intention in intentions:
        await dbs.rings_help.delete_from_help_array(intention.to_id, intention.from_id)

    await dbs.intentions.update_intention_status(11, 110)
    await dbs.intentions.update_intention_status(12, 120)
    await dbs.intentions.update_intention_status(13, 0)

    events = await dbs.events.get_events_from_status(event_status="future_event", send=False)
    for event in events:
        await dbs.events.update_send_event(event.event_id)
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫–∞–∫–æ–º —Å—Ç–∞—Ç—É—Å–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—É—á–∞—Ç–µ–ª—å, 
        —á—Ç–æ–±—ã –ø—Ä–∏ –∫—Ä–∞—Å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ –µ–º—É –Ω–µ –≤–∏—Å–µ–ª–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –¥–ª—è –µ–≥–æ –∂–µ–ª—Ç–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        """
        user_to = await dbs.users.get_user(event.to_id)
        if user_to.status == "orange":
            await dbs.intentions.create_intention(from_id=event.from_id,
                                                  to_id=event.to_id,
                                                  payment=event.payment,
                                                  currency=event.currency,
                                                  create_date=datetime.now(),
                                                  user_status="orange",
                                                  status=1)
        elif 'red' in user_to.status:
            await dbs.intentions.create_intention(active=0,
                                                  from_id=event.from_id,
                                                  to_id=event.to_id,
                                                  payment=event.payment,
                                                  currency=event.currency,
                                                  create_date=datetime.now(),
                                                  user_status="orange",
                                                  status=1)

    return


async def for_five_day():
    text = emojize(_("–ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –º–µ—Å—è—Ü.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ "
                     "–º–µ—Å—è—Ü–∞.\n\n–í—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏ ü§ù 1-–≥–æ —á–∏—Å–ª–∞ —É–π–¥—É—Ç –≤ –∞—Ä—Ö–∏–≤ "
                     "–¥–æ–ª–≥–æ–≤/–Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ :hourglass: –≤ –æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä–µ üóì, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å "
                     "–∏—Ö.\n\n–ù–∞–º–µ—Ä–µ–Ω–∏—è :heart:, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã, –±—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã –∏ –≤—ã –≤—ã–π–¥–µ—Ç–µ –∏–∑ —ç—Ç–æ–≥–æ –∫—Ä—É–≥–∞ "
                     "–ø–æ–º–æ—â–∏.\n–ò—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ :+1: –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ –ø—Ä–æ–¥–ª—è—Ç—Å—è –∫–∞–∫ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ :heart: "
                     "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–º–æ—â—å. –í—ã —Å–º–æ–∂–µ—Ç–µ –∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å."))

    all_users = await dbs.users.get_all_users()
    for user in all_users:
        await send_message(user.tg_id, text)
        await asyncio.sleep(.05)


sched = AsyncIOScheduler()

# –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∫–∞–∂–¥–∞–≥–æ –º–µ—Å—è—Ü–∞ –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞ –≤ 00 —á–∞—Å–æ–≤ –≤ 00 –º–∏–Ω—É—Ç
sched.add_job(first_day_month, CronTrigger.from_crontab('0 0 1 * *'))

sched.add_job(for_five_day, CronTrigger.from_crontab('0 0 25 * *'))


async def scheduler_init():
    sched.start()


